openapi: 3.0.1
info:
  title: Shop API
  description: API for managing shops and the products they offer.
  version: 1.0.0

servers:
  - url: http://localhost:8080
    description: Development server

paths:
  /shops:
    get:
      summary: Get shops with filters and pagination
      description: Retrieves a paginated list of shops, allowing filtering by country, city, and address.
      operationId: getShopsWithFilters
      tags:
        - Shop
      parameters:
        - name: country
          in: query
          required: false
          description: Filter by country.
          schema:
            type: string
            example: "España"
        - name: city
          in: query
          required: false
          description: Filter by city.
          schema:
            type: string
            example: "Coruña"
        - name: address
          in: query
          required: false
          description: Filter by address (partial match).
          schema:
            type: string
            example: "Os Mallos"
        - name: page
          in: query
          required: false
          description: Page number (0-indexed) to retrieve.
          schema:
            type: integer
            default: 0
            minimum: 0
        - name: size
          in: query
          required: false
          description: Number of shops per page.
          schema:
            type: integer
            default: 20
            minimum: 1
        - name: sort
          in: query
          required: false
          description: Sorting criteria in the format_ property(,asc|desc). Default sort is shopId,asc.
          schema:
            type: string
            example: "city,asc"
            default: "shopId,asc"
      responses:
        '200':
          description: Successfully retrieved a paginated list of shops.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageResponseShopDTO'
        '400':
          description: Bad Request - Invalid filter parameters or pagination values.

        '500':
          description: Internal Server Error.

    post:
      summary: Add a new shop
      description: Creates a new shop record.
      operationId: addShop
      tags:
        - Shop
      requestBody:
        description: Data for the new shop.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ShopAddDTO'
      responses:
        '201':
          description: Shop created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShopDTO'
              examples:
                createdShop: # Ejemplo de tu anotación
                  value:
                    shopId: 4
                    country: "España"
                    city: "Coruña"
                    address: "Os Mallos 10"
        '400':
          description: Missing or invalid fields.

        '409':
          description: Shop already exists at this address in this city and country.

        '500':
          description: Internal Server Error.

  /shops/{shopId}:
    get:
      summary: Get a shop by ID
      description: Retrieves details of a specific shop.
      operationId: getShopById
      tags:
        - Shop
      parameters:
        - name: shopId
          in: path
          required: true # Aunque en tu código es (required = false), es raro para un GET by ID. Asumo true.
          description: Unique identifier of the shop.
          schema:
            type: integer
            format: int32
            example: 1
      responses:
        '200':
          description: Successfully retrieved the shop.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShopDTO'
        '404':
          description: Shop not found.

        '500':
          description: Internal Server Error.

    put:
      summary: Update an existing shop
      description: Updates all details of an existing shop.
      operationId: updateShop
      tags:
        - Shop
      parameters:
        - name: shopId
          in: path
          required: true
          description: Unique identifier of the shop to update.
          schema:
            type: integer
            format: int32
            example: 1
      requestBody:
        description: New data for the shop. All fields are typically required for PUT.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateShopDTO'
      responses:
        '200':
          description: Shop updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShopDTO'
        '400':
          description: Invalid input. Validation error.

        '404':
          description: Shop not found.

        '500':
          description: Internal Server Error.

    patch:
      summary: Partially update an existing shop
      description: Updates specific fields of an existing shop. Fields not provided will remain unchanged.
      operationId: partialUpdateShop
      tags:
        - Shop
      parameters:
        - name: shopId
          in: path
          required: true
          description: Unique identifier of the shop to partially update.
          schema:
            type: integer
            format: int32
            example: 1
      requestBody:
        description: Shop data to partially update. Only include fields to be changed.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateShopDTO' # Usando el mismo DTO que PUT, asumiendo que los campos son opcionales o la lógica maneja nulos.
              # Idealmente un DTO específico para PATCH (ShopPatchDTO) con todos los campos opcionales.
      responses:
        '200':
          description: Shop partially updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShopDTO'
        '400':
          description: Invalid input. Validation error.

        '404':
          description: Shop not found.

        '500':
          description: Internal Server Error.


    delete:
      summary: Delete a shop by ID
      description: Deletes a specific shop. Associated product-in-shop entries might also be affected depending on DB constraints.
      operationId: deleteShop
      tags:
        - Shop
      parameters:
        - name: shopId
          in: path
          required: true
          description: Unique identifier of the shop to delete.
          schema:
            type: integer
            format: int32
            example: 1
      responses:
        '200': # Tu código devuelve ResponseEntity.ok().build() que es 200 con cuerpo vacío
          description: The shop has been deleted successfully.
        # '204': # Alternativa común para DELETE, reflejado en tu @ApiResponse para este método.
        #   description: The shop has been deleted successfully (No Content).
        '404':
          description: Shop not found.

        '500':
          description: Internal Server Error.

  /shops/{shopId}/products/{productId}:
    post:
      summary: Add a product to a shop with a specific price
      description: Registers a product to be available in a specific shop at a given price.
      operationId: addProductToShop # Cambiado de addProductShop para consistencia
      tags:
        - Shop Product Offering
      parameters:
        - name: shopId
          in: path
          required: true
          description: Identifier of the shop.
          schema:
            type: integer
            format: int32
            example: 2
        - name: productId
          in: path
          required: true
          description: Identifier of the product.
          schema:
            type: integer
            format: int32
            example: 1
      requestBody:
        description: Price for the product in this shop.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddProductShopDTO'
      responses:
        '200': # Tu código devuelve ResponseEntity.ok()
          description: Product added to shop successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductInShopDTO'
              examples:
                productAdded: # Ejemplo de tu anotación
                  value:
                    productInShopId: 123 # Este ID se generaría
                    productId: 1
                    shopId: 2
                    price: 15.99
        '400':
          description: Invalid price provided.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                invalidPrice: # Ejemplo de tu anotación
                  value:
                    error: "Price must be greater than or equal to 0"
        '404':
          description: Shop or product not found.

        '409':
          description: Product already exists in this shop.

        '500':
          description: Internal Server Error.

    patch:
      summary: Update the price of a product in a shop
      description: Modifies the price of an existing product offering in a specific shop.
      operationId: updateProductInShopPrice # Cambiado de updateProductInShop para claridad
      tags:
        - Shop Product Offering
      parameters:
        - name: shopId
          in: path
          required: true
          description: Identifier of the shop.
          schema:
            type: integer
            format: int32
            example: 2
        - name: productId
          in: path
          required: true
          description: Identifier of the product.
          schema:
            type: integer
            format: int32
            example: 1
      requestBody:
        description: New price for the product in this shop.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductInShopPatchDTO'
      responses:
        '200':
          description: Price of the product in the shop updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductInShopDTO'
        '400':
          description: Invalid price provided.

        '404':
          description: Product offering (product in shop) not found.

        '500':
          description: Internal Server Error.

    delete:
      summary: Remove a product offering from a shop
      description: Deletes the record of a product being offered in a specific shop.
      operationId: deleteProductFromShop
      tags:
        - Shop Product Offering
      parameters:
        - name: shopId
          in: path
          required: true
          description: Identifier of the shop.
          schema:
            type: integer
            format: int32
            example: 2
        - name: productId
          in: path
          required: true
          description: Identifier of the product.
          schema:
            type: integer
            format: int32
            example: 1
      responses:
        '200': # Tu código devuelve ResponseEntity.ok().build()
          description: The product offering has been deleted successfully from the shop.
        # '204': # Alternativa común y presente en tu @ApiResponse
        #   description: The product offering has been deleted successfully (No Content).
        '404':
          description: Product offering (product in shop) not found.

        '500':
          description: Internal Server Error.

components:
  schemas:
    ShopDTO:
      type: object
      description: Represents a shop's location and details.
      properties:
        shopId:
          type: integer
          format: int32
          description: Unique identifier for the shop.
          example: 1
        country:
          type: string
          description: Country where the shop is located.
          example: "España"
        city:
          type: string
          description: City where the shop is located.
          example: "Coruña"
        address:
          type: string
          description: Street address of the shop.
          example: "Rúa da Prata, 123"

    ShopAddDTO:
      type: object
      description: Data required to create a new shop.
      properties:
        country:
          type: string
          description: Country where the shop is located.
          example: "España"
        city:
          type: string
          description: City where the shop is located.
          example: "Coruña"
        address:
          type: string
          description: Street address of the shop.
          example: "Rúa Nova, 45"
      required:
        - country
        - city
        - address

    UpdateShopDTO: # Usado para PUT y PATCH de Shop
      type: object
      description: Data to update an existing shop. For PATCH, only provided fields are updated.
      properties:
        country:
          type: string
          description: New country for the shop.
          example: "Portugal"
        city:
          type: string
          description: New city for the shop.
          example: "Lisboa"
        address:
          type: string
          description: New street address for the shop.
          example: "Avenida da Liberdade, 100"
      # Para PATCH, ningún campo es 'required'. Para PUT, todos serían 'required'.
      # Si se usa el mismo DTO, la lógica de backend maneja la opcionalidad para PATCH.

    AddProductShopDTO:
      type: object
      description: Data required to add a product to a shop, specifically its price.
      properties:
        price:
          type: number
          format: double
          description: Price of the product in this specific shop.
          example: 19.99
          minimum: 0
      required:
        - price

    ProductInShopPatchDTO: # Específico para actualizar el precio de un producto en una tienda
      type: object
      description: Data to update the price of a product in a shop.
      properties:
        price:
          type: number
          format: double
          description: New price for the product in this shop.
          example: 21.50
          minimum: 0
      required:
        - price

    ProductInShopDTO: # Ya definido en purchase.yml, pero lo incluyo aquí si este fuera un archivo independiente
      # o para mostrar su estructura necesaria.
      type: object
      description: Represents a specific product available in a specific shop at a certain price.
      properties:
        productInShopId:
          type: integer
          format: int32
          description: Unique identifier for this product-in-shop entry.
          example: 101
        productId:
          type: integer
          format: int32
          description: Identifier of the product.
          example: 25
        shopId:
          type: integer
          format: int32
          description: Identifier of the shop where this product is offered.
          example: 3
        price:
          type: number
          format: double
          description: Price of the product in this shop.
          example: 1299.99

    PageResponseShopDTO:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/ShopDTO'
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32