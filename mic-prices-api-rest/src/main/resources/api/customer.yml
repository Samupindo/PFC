openapi: 3.0.1
info:
  title: Customer API
  description: API for managing customers.
  version: 1.0.0

servers:
  - url: http://localhost:8080
    description: Development server

paths:
  /customers:
    get:
      summary: Get customers with filters and pagination
      description: Retrieves a paginated list of customers, allowing filtering by name, phone, and email.
      operationId: getCustomersWithFilters
      tags:
        - Customer
      parameters:
        - name: name
          in: query
          required: false
          description: Filter by customer name (partial match).
          schema:
            type: string
            example: "John Doe"
        - name: phone
          in: query
          required: false
          description: Filter by customer phone number.
          schema:
            type: integer
            format: int32
            example: 123456789
        - name: email
          in: query
          required: false
          description: Filter by customer email (partial match).
          schema:
            type: string
            format: email
            example: "john.doe@example.com"
        - name: page
          in: query
          required: false
          description: Page number (0-indexed) to retrieve.
          schema:
            type: integer
            default: 0
            minimum: 0
        - name: size
          in: query
          required: false
          description: Number of customers per page.
          schema:
            type: integer
            default: 20
            minimum: 1
        - name: sort
          in: query
          required: false
          description: Sorting criteria in the format_ property(,asc|desc). Default sort is customerId,asc.
          schema:
            type: string
            example: "name,asc"
            default: "customerId,asc"
      responses:
        '200':
          description: Successfully retrieved a paginated list of customers.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageResponseCustomerDTO'
        '400':
          description: Bad Request - Invalid filter parameters or pagination values.

        '500':
          description: Internal Server Error.

    post:
      summary: Add a new customer
      description: Creates a new customer record.
      operationId: addCustomer
      tags:
        - Customer
      requestBody:
        description: Customer data to create.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCustomerDTO'
      responses:
        '201':
          description: Customer created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerDTO'
        '400':
          description: Invalid input. Missing required field or validation error.

        '500':
          description: Internal Server Error.


  /customers/{customerId}:
    get:
      summary: Get a customer by ID
      description: Retrieves a specific customer by their unique ID.
      operationId: getCustomerById
      tags:
        - Customer
      parameters:
        - name: customerId
          in: path
          required: true
          description: Unique identifier of the customer.
          schema:
            type: integer
            format: int32
            example: 1
      responses:
        '200':
          description: Successfully retrieved the customer.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerDTO'
        '404':
          description: Customer not found.

        '500':
          description: Internal Server Error.


    put:
      summary: Update an existing customer
      description: Updates all details of an existing customer.
      operationId: updateCustomer
      tags:
        - Customer
      parameters:
        - name: customerId
          in: path
          required: true
          description: Unique identifier of the customer to update.
          schema:
            type: integer
            format: int32
            example: 1
      requestBody:
        description: Customer data to update. All fields are typically required for PUT.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerPutDTO'
      responses:
        '200':
          description: Customer updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerDTO'
        '400':
          description: Invalid input. Validation error.

        '404':
          description: Customer not found.

        '500':
          description: Internal Server Error.


    patch:
      summary: Partially update an existing customer
      description: Updates specific fields of an existing customer. Fields not provided will remain unchanged.
      operationId: partialUpdateCustomer
      tags:
        - Customer
      parameters:
        - name: customerId
          in: path
          required: true
          description: Unique identifier of the customer to partially update.
          schema:
            type: integer
            format: int32
            example: 1
      requestBody:
        description: Customer data to partially update. Only include fields to be changed.
        required: true
        content:
          application/json:
            # Usando CreateCustomerDTO como en tu código, asumiendo que los campos son opcionales
            # o tu lógica de backend maneja los nulos/no presentes adecuadamente para PATCH.
            # Idealmente, para PATCH, se usaría un DTO donde todos los campos son explícitamente opcionales.
            schema:
              $ref: '#/components/schemas/CreateCustomerDTO' # O un CustomerPatchDTO específico
      responses:
        '200':
          description: Customer partially updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerDTO'
        '400':
          description: Invalid input. Validation error (e.g., empty name if provided).

        '404':
          description: Customer not found.

        '500':
          description: Internal Server Error.


    delete:
      summary: Delete a customer by ID
      description: Deletes a specific customer by their unique ID.
      operationId: deleteCustomer
      tags:
        - Customer
      parameters:
        - name: customerId
          in: path
          required: true
          description: Unique identifier of the customer to delete.
          schema:
            type: integer
            format: int32
            example: 1
      responses:
        '200': # Tu código devuelve ResponseEntity.ok() que es 200
          description: Customer deleted successfully.
        # '204':
        #   description: Customer deleted successfully (No Content). Alternativa común para DELETE.
        '404':
          description: Customer not found.

        '500':
          description: Internal Server Error.

components:
  schemas:
    CustomerDTO:
      type: object
      description: Represents a customer.
      properties:
        customerId:
          type: integer
          format: int32
          description: Unique identifier for the customer.
          example: 1
        name:
          type: string
          description: Full name of the customer.
          example: "Jane Doe"
        phone:
          type: integer
          format: int32
          description: Phone number of the customer.
          example: 987654321
        email:
          type: string
          format: email
          description: Email address of the customer.
          example: "jane.doe@example.com"


    CreateCustomerDTO:
      type: object
      description: Data required to create a new customer.
      properties:
        name:
          type: string
          description: Full name of the customer.
          example: "Jane Doe"
          # Podrías añadir maxLength, pattern si tienes validaciones @Size, @Pattern
        phone:
          type: integer
          format: int32
          description: Phone number of the customer.
          example: 987654321
          # Podrías añadir minimum, maximum si tienes validaciones @Min, @Max
        email:
          type: string
          format: email
          description: Email address of the customer.
          example: "jane.doe@example.com"
          # Podrías añadir maxLength, pattern
      required: # Basado en @Valid y la naturaleza de un 'create'
        - name
        - email # Asumiendo que el email también es requerido para la creación, ajusta si no es así. El teléfono puede ser opcional.

    CustomerPutDTO:
      type: object
      description: Data required to update an existing customer (all fields typically required for PUT).
      properties:
        name:
          type: string
          description: Full name of the customer.
          example: "Jane Updated Doe"
        phone:
          type: integer
          format: int32
          description: Phone number of the customer.
          example: 112233445
        email:
          type: string
          format: email
          description: Email address of the customer.
          example: "jane.updated@example.com"
      required: # Para PUT, usualmente todos los campos que se pueden actualizar son requeridos.
        - name
        - phone
        - email

    # PageResponse genérico adaptado para CustomerDTO
    PageResponseCustomerDTO:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/CustomerDTO'
          description: List of customers for the current page.
        totalElements:
          type: integer
          format: int64
          description: Total number of customers matching the criteria across all pages.
          example: 100
        totalPages:
          type: integer
          format: int32 # O int64 si esperas muchísimas páginas
          description: Total number of pages available.
          example: 10
        # Puedes añadir más campos de la clase Page de Spring si los expones, como:
        # number: (current page number)
        # size: (page size)
        # numberOfElements: (elements in current page)
        # etc.

    ErrorResponse: # Un DTO de error genérico (ejemplo)
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
          example: "2023-10-27T12:34:56Z"
        status:
          type: integer
          example: 400
        error:
          type: string
          example: "Bad Request"
        message:
          type: string
          example: "Validation failed for object='createCustomerDTO'. Error count: 1"
        path:
          type: string
          example: "/customers"