openapi: 3.0.1
info:
  title: Purchase API
  description: API for managing purchases and their line items.
  version: 1.0.0

servers:
  - url: http://localhost:8080
    description: Development server

paths:
  /purchases:
    get:
      summary: Get purchases with filters and pagination
      description: Retrieves a paginated list of purchases, allowing filtering by customer, products in shop, total price range, and shopping status.
      operationId: getPurchasesWithFilters
      tags:
        - Purchase
      parameters:
        - name: customerId
          in: query
          required: false
          description: Filter by customer ID.
          schema:
            type: integer
            format: int32
            example: 1
        - name: productInShop
          in: query
          required: false
          description: Filter by a list of productInShop IDs. To send multiple, repeat the parameter (e.g., productInShop=1&productInShop=2) or use comma-separated if your server supports it (style/explode can define this).
          schema:
            type: array
            items:
              type: integer
              format: int32
            example: [ 101, 102 ]
        - name: totalPriceMax
          in: query
          required: false
          description: Filter by maximum total price of the purchase.
          schema:
            type: number
            format: double
            example: 250.00
        - name: totalPriceMin
          in: query
          required: false
          description: Filter by minimum total price of the purchase.
          schema:
            type: number
            format: double
            example: 50.00
        - name: shopping
          in: query
          required: false
          description: Filter by shopping status (true for active shopping carts, false for completed purchases).
          schema:
            type: boolean
            example: true
        - name: page
          in: query
          required: false
          description: Page number (0-indexed) to retrieve.
          schema:
            type: integer
            default: 0
            minimum: 0
        - name: size
          in: query
          required: false
          description: Number of purchases per page.
          schema:
            type: integer
            default: 20
            minimum: 1
        - name: sort
          in: query
          required: false
          description: Sorting criteria in the format_ property(,asc|desc). Default sort is purchaseId,asc.
          schema:
            type: string
            example: "totalPrice,desc"
            default: "purchaseId,asc"
      responses:
        '200':
          description: Successfully retrieved a paginated list of purchases.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageResponsePurchaseDTO'

    post:
      summary: Create a new purchase (shopping cart)
      description: Initializes a new purchase for a customer. It starts in a 'shopping' state.
      operationId: createPurchase
      tags:
        - Purchase
      requestBody:
        description: Customer ID for whom the purchase is being created.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostPurchaseDTO'
      responses:
        '201':
          description: Purchase (shopping cart) created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PurchaseDTO'

  /purchases/{purchaseId}:
    get:
      summary: Get a purchase by ID
      description: Retrieves details of a specific purchase, including its line items.
      operationId: getPurchaseById
      tags:
        - Purchase
      parameters:
        - name: purchaseId
          in: path
          required: true
          description: Unique identifier of the purchase.
          schema:
            type: integer
            format: int32
            example: 1
      responses:
        '200':
          description: Successfully retrieved the purchase.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PurchaseDTO'

    delete:
      summary: Delete a purchase by ID
      description: Deletes a specific purchase and its associated line items.
      operationId: deletePurchase
      tags:
        - Purchase
      parameters:
        - name: purchaseId
          in: path
          required: true
          description: Unique identifier of the purchase to delete.
          schema:
            type: integer
            format: int32
            example: 1
      responses:
        '200': # Your code returns ResponseEntity.ok()
          description: Purchase deleted successfully.
        # '204':
        #   description: Purchase deleted successfully (No Content). Alternative for DELETE.

  /purchases/{purchaseId}/productInShop/{productInShopId}:
    post:
      summary: Add a product to an existing purchase (shopping cart)
      description: Adds a specified product (from a shop) to an active purchase (shopping cart).
      operationId: addProductToPurchase
      tags:
        - Purchase
      parameters:
        - name: purchaseId
          in: path
          required: true
          description: Identifier of the purchase (shopping cart) to add the product to.
          schema:
            type: integer
            format: int32
            example: 1
        - name: productInShopId
          in: path
          required: true
          description: Identifier of the product-in-shop offering to add.
          schema:
            type: integer
            format: int32
            example: 101
      responses:
        '200': # Your code returns ResponseEntity.ok()
          description: Product successfully added to the purchase. Returns the updated purchase.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PurchaseDTO'

    delete:
      summary: Remove a product from an existing purchase (shopping cart)
      description: Removes a specific product (line item) from an active purchase.
      operationId: removeProductFromPurchase
      tags:
        - Purchase
      parameters:
        - name: purchaseId
          in: path
          required: true
          description: Identifier of the purchase (shopping cart) to remove the product from.
          schema:
            type: integer
            format: int32
            example: 1
        - name: productInShopId
          in: path
          required: true
          description: Identifier of the product-in-shop offering to remove.
          schema:
            type: integer
            format: int32
            example: 101
      responses:
        '200': # Your code returns ResponseEntity.ok()
          description: Product successfully removed from the purchase.
        # '204':
        #   description: Product successfully removed (No Content).

  /purchases/{purchaseId}/finish:
    patch:
      summary: Finish a purchase (convert shopping cart to a completed order)
      description: Marks an active purchase (shopping cart) as completed (shopping = false).
      operationId: finishPurchase
      tags:
        - Purchase
      parameters:
        - name: purchaseId
          in: path
          required: true
          description: Identifier of the purchase (shopping cart) to finish.
          schema:
            type: integer
            format: int32
            example: 1
      responses:
        '200':
          description: Purchase successfully finished. Returns the updated purchase.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PurchaseDTO'

components:
  schemas:
    ProductInShopDTO:
      type: object
      description: Represents a specific product available in a specific shop at a certain price.
      properties:
        productInShopId:
          type: integer
          format: int32
          description: Unique identifier for this product-in-shop entry.
          example: 101
        productId:
          type: integer
          format: int32
          description: Identifier of the product.
          example: 25
        shopId:
          type: integer
          format: int32
          description: Identifier of the shop where this product is offered.
          example: 3
        price:
          type: number
          format: double
          description: Price of the product in this shop.
          example: 1299.99

    PurchaseDTO:
      type: object
      description: Represents a purchase, which can be an active shopping cart or a completed order.
      properties:
        purchaseId:
          type: integer
          format: int32
          description: Unique identifier for the purchase.
          example: 1
        customerId:
          type: integer
          format: int32
          description: Identifier of the customer who made the purchase.
          example: 1
        products:
          type: array
          description: List of products included in this purchase.
          items:
            $ref: '#/components/schemas/ProductInShopDTO'
        totalPrice:
          type: number
          format: double
          description: Total price of all items in the purchase.
          example: 1549.98
        shopping:
          type: boolean
          description: Indicates if the purchase is still an active shopping cart (true) or a completed order (false).
          example: true

    PostPurchaseDTO:
      type: object
      description: Data required to initiate a new purchase.
      properties:
        customerId:
          type: integer
          format: int32
          description: Identifier of the customer for whom the purchase is being created.
          example: 1
      required:
        - customerId

    PageResponsePurchaseDTO:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/PurchaseDTO'
          description: List of purchases for the current page.
        totalElements:
          type: integer
          format: int64
          description: Total number of purchases matching the criteria across all pages.
          example: 50
        totalPages:
          type: integer
          format: int32
          description: Total number of pages available.
          example: 5